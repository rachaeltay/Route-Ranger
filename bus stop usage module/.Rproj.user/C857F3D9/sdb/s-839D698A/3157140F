{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(mongolite)\nlibrary(jsonlite)\nlibrary(DT)\nlibrary(ggplot2)\n\nqueryList <- mongo(db = \"local\", collection = \"queryList\")\n\nserver <- function(input, output) {\n  getStartDate <- function(date) {\n    if (input$timeFrame == \"Monthly\") {\n      paste0(substr(date,0,8), \"01\", 'T00:00:00Z')\n    } else {\n      paste0(date, 'T00:00:00Z')\n    }\n  }\n  \n  getEndDate <- function(date) {\n    if (input$timeFrame == \"Monthly\") {\n      paste0(substr(date,0,8), \"31\", 'T00:00:00Z')\n    } else {\n      paste0(date, 'T00:00:00Z')\n    }\n  }\n  \n  getBoarding <- eventReactive(input$genResult, {\n    if (input$timeFrame == \"Hourly\") {\n      query <- paste0('{\"sourceBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate1), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$startDate1+1),'\"}}}')\n    } else if (input$timeFrame == \"Monthly\") {\n      query <- paste0('{\"sourceBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate2), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$endDate+1), '\"}}}')\n    } else {\n      query <- paste0('{\"sourceBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate2), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$endDate+1), '\"}}}')\n    }\n    queryList$find(query)\n  })\n  \n  getAlighting <- eventReactive(input$genResult, {\n    if (input$timeFrame == \"Hourly\") {\n      query <- paste0('{\"destinationBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate1), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$startDate1+1),'\"}}}')\n    } else if (input$timeFrame == \"Monthly\") {\n      query <- paste0('{\"destinationBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate2), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$endDate+1), '\"}}}')\n    } else {\n      query <- paste0('{\"destinationBusStop\":\"', isolate(input$busStop), '\",\"timestamp\":{\"$gte\":{\"$date\":\"', getStartDate(input$startDate2), '\"},\"$lt\":{\"$date\":\"', getEndDate(input$endDate+1), '\"}}}')\n    }\n    queryList$find(query)\n  })\n  \n  output$boarding <- renderText({\n    print(nrow(getBoarding()))\n  })\n  \n  output$alighting <- renderText({\n    print(nrow(getAlighting()))\n  })\n  \n  output$plot <- renderPlot({\n    busStop <- isolate(input$busStop)\n    timeFrame <- isolate(input$timeFrame)\n    boarding <- getBoarding()\n    alighting <- getAlighting()\n    \n    if (timeFrame == \"Hourly\") {\n      boarding <- table(cut(boarding$timestamp, breaks=\"hour\"))\n      alighting <- table(cut(alighting$timestamp, breaks=\"hour\"))\n    } else if (timeFrame == \"Daily\") {\n      boarding <- table(cut(boarding$timestamp, breaks=\"day\"))\n      alighting <- table(cut(alighting$timestamp, breaks=\"day\"))\n    } else if (timeFrame == \"Weekly\") {\n      boarding <- table(cut(boarding$timestamp, breaks=\"week\"))\n      alighting <- table(cut(alighting$timestamp, breaks=\"week\"))\n    } else if (timeFrame == \"Monthly\") {\n      boarding <- table(cut(boarding$timestamp, breaks=\"month\"))\n      alighting <- table(cut(alighting$timestamp, breaks=\"month\"))\n    }\n    \n    boarding <- data.frame(boarding)\n    boarding$Group <- paste0(\"Boarding from \", busStop)\n    colnames(boarding) <- c(\"timeFrame\", \"Count\", \"Group\")\n    alighting <- data.frame(alighting)\n    alighting$Group <- paste0(\"Alighting from \", busStop)\n    colnames(alighting) <- c(\"timeFrame\", \"Count\", \"Group\")\n    combined <- rbind(alighting, boarding)\n    \n    plot <- ggplot(combined, aes(x=timeFrame, y=Count, group=Group, color=Group)) + geom_line()\n    plot <- plot + labs(title=paste0('Number of riders boarding at ', busStop), y=\"# of riders\", x=\"\")\n    plot <- plot + theme(panel.background=element_rect(fill=\"black\"), panel.grid.major = element_blank(), panel.grid.minor = element_blank())\n    plot\n  })\n  \n  output$testText <- renderText({\n    \n  })\n  \n  output$testTable <- DT::renderDataTable({\n    getBoarding()\n  })\n}\n",
    "created" : 1507034115863.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1182099444",
    "id" : "3157140F",
    "lastKnownWriteTime" : 1508241657,
    "last_content_update" : 1508241657859,
    "path" : "D:/R Studio/RStudio/3103/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}