hour(date) <- i
minute(date) <- k
s <- sample(stops, 2)
if (match(s[[1]], stops) < match(s[[2]], stops)) {
stop1 <- s[[1]]
stop2 <- s[[2]]
} else {
stop1 <- s[[2]]
stop2 <- s[[1]]
}
qDate <- paste0(substring(date,0,10), ' ',substring(date,12,19), ' +08')
busidx <- whatBusIdx(qDate, stop1, stop2, "A1")
query <- c(
paste0('{
"bus" : "A1",
"stopId": "', stop1, '",
"busIdx": "', busidx, '",
"timeArr": "', getTimeArr(qDate, genETA(qDate)), '",
"rETA": "', genETA(qDate), '",
"pETA": "', getETA(qDate, stop1, stop2, "A1"), '",
"realIdx": "', busidx%%7, '",
"sourceBusStop" : "', stop1,'",
"destinationBusStop" : "', stop2,'",
"timestamp" : {"$date": "',substring(date,0,10),'T',substring(date,12,19),'.772Z"}}'
)
)
queryList$insert(query)
}
print(paste0("Min: ",k))
}
print(paste0("Hour: ",i))
}
for (h in 10:31) {
for (i in 7:23) {
normal <- sort(c(rnorm(60, 10, 0.075)))
normal1 <- normal[31:60]
normal2 <- normal[1:30]
normal <- c(normal1, normal2)
normal <- sapply(normal, {function(x) x = rnorm(1,x,1)})
denom <- sum(normal)
mins <- round(sapply(normal, {function(x) x = x/denom*hourly[[i-6]]}))
queries <- data.frame()
for (k in 1:60) {
for (l in 1:mins[[k]]) {
date <- Sys.time()
day(date) <- h
hour(date) <- i
minute(date) <- k
s <- sample(stops, 2)
if (match(s[[1]], stops) < match(s[[2]], stops)) {
stop1 <- s[[1]]
stop2 <- s[[2]]
} else {
stop1 <- s[[2]]
stop2 <- s[[1]]
}
qDate <- paste0(substring(date,0,10), ' ',substring(date,12,19), ' +08')
busidx <- whatBusIdx(qDate, stop1, stop2, "A1")
query <- c(
paste0('{
"bus" : "A1",
"stopId": "', stop1, '",
"busIdx": "', busidx, '",
"timeArr": "', getTimeArr(qDate, genETA(qDate)), '",
"rETA": "', genETA(qDate), '",
"pETA": "', getETA(qDate, stop1, stop2, "A1"), '",
"realIdx": "', busidx%%7, '",
"sourceBusStop" : "', stop1,'",
"destinationBusStop" : "', stop2,'",
"timestamp" : {"$date": "',substring(date,0,10),'T',substring(date,12,19),'.772Z"}}'
)
)
queryList$insert(query)
}
print(paste0("Min: ",k))
}
print(paste0("Hour: ",i))
}
print(paste0("Day: ",h))
}
library(mc2d)
library(lubridate)
library(mongolite)
library(jsonlite)
#loading queryList db
queryList <- mongo(url = "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "queryList")
#loading index db
idx <- mongo(url = , "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "testRoute")
stops <- list('PGP', 'Kent_Ridge_MRT', 'NUH', 'LT29', 'UHall', 'Opp_UHC', 'YIH', 'Central_Library', 'LT13', 'AS7', 'COM2', 'BIZ2', 'PGP_Hse_12', 'PGP_Hse_7')
hourly <- list(50,55,70,95,100,120,95,80,65,50,50,45,40,35,30,20,10)
startTime <- 435
set.seed(123)
#BEN FUNCTIONS -------------------------------------------------------------------------------------
getMins <- function(data) {
hour <- as.numeric(substr(data,12,13))
min <- as.numeric(substr(data,15,16))
timequery <- (hour*60)+(min)
return(timequery)
}#end of getMins
loadindex <- function(filter) {
stopIdx <- idx$find(query = toString(toJSON(list(stopId=filter),auto_unbox = TRUE)))
}#end of loadindex
whatBusIdx <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.character(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
#add new modulo
return(ctr)
}#return correct busIdx of the timeQ
getETA <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.numeric(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
return(realeta)
}#return pETA in numeric
genETA <- function(qdate) { #qdate is the timestamp generated
time <- getMins(qdate) #gives you time in minutes
rETA <- 0
if ((time < 661) && (time > 430)) {rETA <- ceiling(runif(1,5,14))} #prenoon non-peak 715am-11am
if ((time < 781) && (time > 660)) {rETA <- ceiling(runif(1,10,25))} #peak hour 11am-1pm
if ((time < 1021) && (time > 780)) {rETA <- ceiling(runif(1,5,14))} #postnoon non-peak 1pm-5pm
if ((time < 1141) && (time > 1020)) {rETA <- ceiling(runif(1,10,25))} #evening peak 5pm-7pm
if ((time < 1381) && (time > 1140)) {rETA <- ceiling(runif(1,5,14))} #night time
return(rETA)
}#end of qdate
getTimeArr <- function(qdate, eta) { #qdate = timestamp of query, eta is result of genETA
timeArr <- getMins(qdate) + eta
return(timeArr)
}#get time arr
#BEN FUNCTIONS END----------------------------------------------------------------------------------
#HOW TO GET
#rETA -> genETA(qdate) #qdate is the timestamp u generate e.g "2017-10-10 11:13:29 +08"
#pETA ->  getETA(qdate,startstop,endstop,busService)
#busIdx -> whatBusIdx(qdate,startstop,endstop,busService)
#realidx -> busIdx%%7
#TimeArr -> getTimeArr(qdate,rETA) #generate rETA before this
for (h in 10:31) {
for (i in 7:23) {
normal <- sort(c(rnorm(60, 10, 0.075)))
normal1 <- normal[31:60]
normal2 <- normal[1:30]
normal <- c(normal1, normal2)
normal <- sapply(normal, {function(x) x = rnorm(1,x,1)})
denom <- sum(normal)
mins <- round(sapply(normal, {function(x) x = x/denom*hourly[[i-6]]}))
queries <- data.frame()
for (k in 1:60) {
for (l in 1:mins[[k]]) {
date <- Sys.time()
day(date) <- h
hour(date) <- i
minute(date) <- k
s <- sample(stops, 2)
if (match(s[[1]], stops) < match(s[[2]], stops)) {
stop1 <- s[[1]]
stop2 <- s[[2]]
} else {
stop1 <- s[[2]]
stop2 <- s[[1]]
}
qDate <- paste0(substring(date,0,10), ' ',substring(date,12,19), ' +08')
busidx <- whatBusIdx(qDate, stop1, stop2, "A1")
query <- c(
paste0('{
"bus" : "A1",
"stopId": "', stop1, '",
"busIdx": "', busidx, '",
"timeArr": "', getTimeArr(qDate, genETA(qDate)), '",
"rETA": "', genETA(qDate), '",
"pETA": "', getETA(qDate, stop1, stop2, "A1"), '",
"realIdx": "', busidx%%7, '",
"sourceBusStop" : "', stop1,'",
"destinationBusStop" : "', stop2,'",
"timestamp" : {"$date": "',substring(date,0,10),'T',substring(date,12,19),'.772Z"}}'
)
)
queryList$insert(query)
}
print(paste0("Min: ",k))
}
print(paste0("Hour: ",i))
}
print(paste0("Day: ",h))
}
rsconnect::setAccountInfo(name='soraares', token='EC68226CCD20202874866A5351C18442', secret='tH9iIWqcJXIYuec9N/lyuzXx78s7P/lpp3IpJlDt')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('D:/Git/Route-Ranger')
rsconnect::setAccountInfo(name='soraares', token='EC68226CCD20202874866A5351C18442', secret='tH9iIWqcJXIYuec9N/lyuzXx78s7P/lpp3IpJlDt')
library(rsconnect)
rsconnect::deployApp('D:/Git/Route-Ranger')
library(rsconnect)
rsconnect::deployApp('D:/Git/Route-Ranger')
Y
library(mc2d)
library(lubridate)
library(mongolite)
library(jsonlite)
#loading queryList db
queryList <- mongo(url = "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "queryList")
#loading index db
idx <- mongo(url = , "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "testRoute")
stops <- list('PGP', 'Kent_Ridge_MRT', 'NUH', 'LT29', 'UHall', 'Opp_UHC', 'YIH', 'Central_Library', 'LT13', 'AS7', 'COM2', 'BIZ2', 'PGP_Hse_12', 'PGP_Hse_7')
hourly <- list(50,55,70,95,100,120,95,80,65,50,50,45,40,35,30,20,10)
startTime <- 435
set.seed(123)
#BEN FUNCTIONS -------------------------------------------------------------------------------------
getMins <- function(data) {
hour <- as.numeric(substr(data,12,13))
min <- as.numeric(substr(data,15,16))
timequery <- (hour*60)+(min)
return(timequery)
}#end of getMins
loadindex <- function(filter) {
stopIdx <- idx$find(query = toString(toJSON(list(stopId=filter),auto_unbox = TRUE)))
}#end of loadindex
whatBusIdx <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.character(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
#add new modulo
return(ctr)
}#return correct busIdx of the timeQ
getETA <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.numeric(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
return(realeta)
}#return pETA in numeric
genETA <- function(qdate) { #qdate is the timestamp generated
time <- getMins(qdate) #gives you time in minutes
rETA <- 0
if ((time < 661) && (time > 430)) {rETA <- ceiling(runif(1,5,14))} #prenoon non-peak 715am-11am
if ((time < 781) && (time > 660)) {rETA <- ceiling(runif(1,10,25))} #peak hour 11am-1pm
if ((time < 1021) && (time > 780)) {rETA <- ceiling(runif(1,5,14))} #postnoon non-peak 1pm-5pm
if ((time < 1141) && (time > 1020)) {rETA <- ceiling(runif(1,10,25))} #evening peak 5pm-7pm
if ((time < 1381) && (time > 1140)) {rETA <- ceiling(runif(1,5,14))} #night time
return(rETA)
}#end of qdate
getTimeArr <- function(qdate, eta) { #qdate = timestamp of query, eta is result of genETA
timeArr <- getMins(qdate) + eta
return(timeArr)
}#get time arr
#BEN FUNCTIONS END----------------------------------------------------------------------------------
#HOW TO GET
#rETA -> genETA(qdate) #qdate is the timestamp u generate e.g "2017-10-10 11:13:29 +08"
#pETA ->  getETA(qdate,startstop,endstop,busService)
#busIdx -> whatBusIdx(qdate,startstop,endstop,busService)
#realidx -> busIdx%%7
#TimeArr -> getTimeArr(qdate,rETA) #generate rETA before this
for (h in 11:31) {
for (i in 7:23) {
normal <- sort(c(rnorm(60, 10, 0.075)))
normal1 <- normal[31:60]
normal2 <- normal[1:30]
normal <- c(normal1, normal2)
normal <- sapply(normal, {function(x) x = rnorm(1,x,1)})
denom <- sum(normal)
mins <- round(sapply(normal, {function(x) x = x/denom*hourly[[i-6]]}))
queries <- data.frame()
for (k in 1:60) {
for (l in 1:mins[[k]]) {
date <- Sys.time()
day(date) <- h
hour(date) <- i
minute(date) <- k
s <- sample(stops, 2)
if (match(s[[1]], stops) < match(s[[2]], stops)) {
stop1 <- s[[1]]
stop2 <- s[[2]]
} else {
stop1 <- s[[2]]
stop2 <- s[[1]]
}
qDate <- paste0(substring(date,0,10), ' ',substring(date,12,19), ' +08')
busidx <- whatBusIdx(qDate, stop1, stop2, "A1")
query <- c(
paste0('{
"bus" : "A1",
"stopId": "', stop1, '",
"busIdx": "', busidx, '",
"timeArr": "', getTimeArr(qDate, genETA(qDate)), '",
"rETA": "', genETA(qDate), '",
"pETA": "', getETA(qDate, stop1, stop2, "A1"), '",
"realIdx": "', busidx%%7, '",
"sourceBusStop" : "', stop1,'",
"destinationBusStop" : "', stop2,'",
"timestamp" : {"$date": "',substring(date,0,10),'T',substring(date,12,19),'.772Z"}}'
)
)
queryList$insert(query)
}
print(paste0("Min: ",k))
}
print(paste0("Hour: ",i))
}
print(paste0("Day: ",h))
}
shiny::runApp('D:/Git/Route-Ranger')
shiny::runApp('D:/Git/Route-Ranger')
library(rsconnect)
rsconnect::deployApp('D:/Git/Route-Ranger')
library(mc2d)
library(lubridate)
library(mongolite)
library(jsonlite)
#loading queryList db
queryList <- mongo(url = "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "queryList")
#loading index db
idx <- mongo(url = , "mongodb://soraares:bt3103@therouteranger-shard-00-00-rgv6u.mongodb.net:27017,therouteranger-shard-00-01-rgv6u.mongodb.net:27017,therouteranger-shard-00-02-rgv6u.mongodb.net:27017/test?ssl=true&replicaSet=TheRouteRanger-shard-0&authSource=admin", db = "trr", collection = "testRoute")
stops <- list('PGP', 'Kent_Ridge_MRT', 'NUH', 'LT29', 'UHall', 'Opp_UHC', 'YIH', 'Central_Library', 'LT13', 'AS7', 'COM2', 'BIZ2', 'PGP_Hse_12', 'PGP_Hse_7')
hourly <- list(50,55,70,95,100,120,95,80,65,50,50,45,40,35,30,20,10)
startTime <- 435
set.seed(123)
#BEN FUNCTIONS -------------------------------------------------------------------------------------
getMins <- function(data) {
hour <- as.numeric(substr(data,12,13))
min <- as.numeric(substr(data,15,16))
timequery <- (hour*60)+(min)
return(timequery)
}#end of getMins
loadindex <- function(filter) {
stopIdx <- idx$find(query = toString(toJSON(list(stopId=filter),auto_unbox = TRUE)))
}#end of loadindex
whatBusIdx <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.character(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
#add new modulo
return(ctr)
}#return correct busIdx of the timeQ
getETA <- function(qdate,start,end,bus) {
ctr <- 0
realeta <- 0
flag =TRUE
whatTime <- getMins(qdate)
stopIndex <- loadindex(start)
currIndex <- stopIndex[bus][1,]
if (currIndex == 0) { realeta <- "WRONG"}
else {
while(flag){
eta <- (435 + (15*ctr) + ((currIndex-1)*5)) - whatTime
if(eta > 0) {
flag = FALSE
realeta <- as.numeric(eta)
}#endif
else {
ctr <- ctr +1
}#endelse
}#end of while
}#end of else
return(realeta)
}#return pETA in numeric
genETA <- function(qdate) { #qdate is the timestamp generated
time <- getMins(qdate) #gives you time in minutes
rETA <- 0
if ((time < 661) && (time > 430)) {rETA <- ceiling(runif(1,5,14))} #prenoon non-peak 715am-11am
if ((time < 781) && (time > 660)) {rETA <- ceiling(runif(1,10,25))} #peak hour 11am-1pm
if ((time < 1021) && (time > 780)) {rETA <- ceiling(runif(1,5,14))} #postnoon non-peak 1pm-5pm
if ((time < 1141) && (time > 1020)) {rETA <- ceiling(runif(1,10,25))} #evening peak 5pm-7pm
if ((time < 1381) && (time > 1140)) {rETA <- ceiling(runif(1,5,14))} #night time
return(rETA)
}#end of qdate
getTimeArr <- function(qdate, eta) { #qdate = timestamp of query, eta is result of genETA
timeArr <- getMins(qdate) + eta
return(timeArr)
}#get time arr
#BEN FUNCTIONS END----------------------------------------------------------------------------------
#HOW TO GET
#rETA -> genETA(qdate) #qdate is the timestamp u generate e.g "2017-10-10 11:13:29 +08"
#pETA ->  getETA(qdate,startstop,endstop,busService)
#busIdx -> whatBusIdx(qdate,startstop,endstop,busService)
#realidx -> busIdx%%7
#TimeArr -> getTimeArr(qdate,rETA) #generate rETA before this
for (h in 11:31) {
for (i in 7:23) {
normal <- sort(c(rnorm(60, 10, 0.075)))
normal1 <- normal[31:60]
normal2 <- normal[1:30]
normal <- c(normal1, normal2)
normal <- sapply(normal, {function(x) x = rnorm(1,x,1)})
denom <- sum(normal)
mins <- round(sapply(normal, {function(x) x = x/denom*hourly[[i-6]]}))
queries <- data.frame()
for (k in 1:60) {
for (l in 1:mins[[k]]) {
date <- Sys.time()
day(date) <- h
hour(date) <- i
minute(date) <- k
s <- sample(stops, 2)
if (match(s[[1]], stops) < match(s[[2]], stops)) {
stop1 <- s[[1]]
stop2 <- s[[2]]
} else {
stop1 <- s[[2]]
stop2 <- s[[1]]
}
qDate <- paste0(substring(date,0,10), ' ',substring(date,12,19), ' +08')
busidx <- whatBusIdx(qDate, stop1, stop2, "A1")
query <- c(
paste0('{
"bus" : "A1",
"stopId": "', stop1, '",
"busIdx": "', busidx, '",
"timeArr": "', getTimeArr(qDate, genETA(qDate)), '",
"rETA": "', genETA(qDate), '",
"pETA": "', getETA(qDate, stop1, stop2, "A1"), '",
"realIdx": "', busidx%%7, '",
"sourceBusStop" : "', stop1,'",
"destinationBusStop" : "', stop2,'",
"timestamp" : {"$date": "',substring(date,0,10),'T',substring(date,12,19),'.772Z"}}'
)
)
queryList$insert(query)
}
print(paste0("Min: ",k))
}
print(paste0("Hour: ",i))
}
print(paste0("Day: ",h))
}
dbDyResponses <- mongo(collection = "dynamicResponses",db = databaseName, url = databaseUrl )
rsconnect::deployApp('D:/Git/Route-Ranger')
rsconnect::deployApp('D:/Git/Route-Ranger')
https://soraares.shinyapps.io/route-ranger/
rsconnect::setAccountInfo(name='soraares', token='EC68226CCD20202874866A5351C18442', secret='tH9iIWqcJXIYuec9N/lyuzXx78s7P/lpp3IpJlDt')
library(reconnect)
library(rsconnect)
rsconnect::deployApp('D:/Git/Route-Ranger')
shiny::runApp('D:/Git/Route-Ranger')
