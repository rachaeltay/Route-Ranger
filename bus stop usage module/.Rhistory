busServiceList$insert(A1)
busServiceList$count()
busServiceList$drop()
busServiceList$insert(A1)
busServiceList$find()
busServiceList$find('{A1}')
busServiceList$find('{"A1"}')
busServiceList$find('{}')
mydata <- jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
setwd("D:/MongoDB/bin/3103")
mydata <- jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
mydata <- jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
fromJSON("busServiceList.json")
test <- fromJSON("busServiceList.json")
test.head()
head(test)
busServiceList
busServiceList$insert(test)
busServiceList$find())
busServiceList$find()
busServiceList$find(fields= '{"created_at":true, "_id":true}', limit = 10)
busServiceList$find('{"busService_id":0}')
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = TRUE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
fromJSON("busServiceList.json")
fromJSON("busServiceList.json")
fromJSON("busServiceList.json")
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
jsonlite::stream_in(flatten(file("busServiceList.json"), verbose = FALSE))
jsonlite::stream_in(flatten(file("busServiceList.json")), verbose = FALSE)
jsonlite::stream_in(flatten(fromJSON("busServiceList.json")), verbose = FALSE)
a <- jsonlite::stream_in(flatten(fromJSON("busServiceList.json")), verbose = FALSE)
a <- jsonlite::stream_in(fromJSON("busServiceList.json"), verbose = FALSE)
?stream_in
a <- jsonlite::stream_in(fromJSON("busServiceList.json"))
a <- jsonlite::stream_in(fromJSON(file("busServiceList.json"))
)
a <- jsonlite::stream_in(fromJSON(file("busServiceList.json"))
)
a <- jsonlite::stream_in(fromJSON(file("busServiceList.json")))
a <- jsonlite::stream_in(file("busServiceList.json"))
a <- jsonlite::stream_in(flatten(file("busServiceList.json"))
)
flatten(file("busServiceList.json"))
fromJSON("busServiceList.json") %>% as.data.frame
file("busServiceList.json")
as.data.frame(file("busServiceList.json"))
as.data.frame(flatten(file("busServiceList.json")))
as.data.frame(file("busServiceList.json"))
as.data.frame(file("busServiceList.json"))
mydata <- jsonlite::stream_in(file("busServiceList.json"), verbose = FALSE)
print(mydata)
busServiceList <- mongo("BusServiceList")
busServiceList$insert(mydata)
busServiceList$count()
busServiceList$drop()
busServiceList$insert(mydata)
busServiceList$find({})
busServiceList$find()
busServiceList$find("A1":)
busServiceList$find('{"A1":}')
busServiceList$find('{}')
busServiceList$find('{"busService_id": 0}')
print(busServiceList$find('{"busService_id": 0}'))
mydata
View(mydata)
View(mydata)
library(data.tree)
library(jsonlite)
library(magrittr)
install.packages(data.tree)
install.packages("data.tree")
library(data.tree)
library(jsonlite)
library(magrittr)
library(data.tree)
library(jsonlite)
library(magrittr)
reposLoL <- fromJSON("https://api.github.com/users/hadley/repos", simplifyDataFrame = FALSE)
repos <- as.Node(reposLoL)
print(repos, "id", "login")
reposdf <- repos$ToDataFrameTable(ownerId = "id",
"login",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
reposdf <- repos$ToDataFrameTable(ownerId = "id",
"login",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf <- repos %>% ToDataFrameTable(ownerId = "id",
"login",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
library("jsonlite")
library('mongolite')
db <- mongo()
db
db$insert(reoosdf)
db$insert(reposdf)
db$find()
reposLoL <- fromJSON("busServiceList.json", simplifyDataFrame = FALSE)
repos <- as.Node(reposLoL)
print(repos, "id", "login")
reposdf <- repos %>% ToDataFrameTable(ownerId = "id",
"login",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
reposdf <- repos %>% ToDataFrameTable(ownerId = "busService_id",
"login",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
reposdf <- repos %>% ToDataFrameTable(ownerId = "busService_id",
directions = directions,
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
reposdf <- repos %>% ToDataFrameTable(ownerId = "busService_id",
directions = "directions",
repoName = function(x) x$parent$name, #relative to the leaf
fullName = "full_name", #unambiguous values are inherited from ancestors
repoId = function(x) x$parent$id,
"fork",
"type")
reposdf
library(mongolite)
library(jsonlite)
library(rjson)
install.packages("rjson")
library(rjson)
JsonData <- fromJSON(file= "BusServiceList.json" )
setwd("D:/MongoDB/bin/3103")
JsonData <- fromJSON(file= "BusServiceList.json" )
view(JsonData)
show(JsonData)
?mongo
?mong()
?mongo()
??mongo
db <- mongo(db = "local", collection = "busServiceList")
library('mongolite')
library("jsonlite")
db <- mongo(db = "local", collection = "busServiceList")
db$count()
db$find()
shiny::runApp()
runApp()
db <- mongo(db = "local", collection = "busServiceList")
library('mongolite')
library("jsonlite")
db <- mongo(db = "local", collection = "busServiceList")
db$find()
A1<-db$find()
typeof(A1)
View(A1)
View(A1)
a1[directions]
A1[directions]
A1["directions]
""
]
A1["directions"]
A1.directions
A1.directions.0
A1[0]
A1[1]
A1[1][0]
A1[1][1]
A1[1][1][1]
runApp()
runApp()
install.packages("DT")
runApp()
library('mongolite')
library("jsonlite")
db <- mongo(db = "local", collection = "busServiceList")
db$find()
d <- db$find()
db <- mongo(db = "local", collection = "busServiceList")
d <- db$find()
head(d)
typeof(d)
view(d)
d.id
d#id
d$id
d$A1
d$A1$directions
d$A1$directions$`0`
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
ggplot2::diamonds)
ggplot2::diamonds
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(mongolite)
library(jsonlite)
buses <- mongo(db = "local", collection = "busStopList")
buses$find()
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal))+geom_point()+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal))+geom_point(aes(color=state)+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal))+geom_point(aes(color=state))+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal))+geom_point(aes(color=state))+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+xlim(c(0, 0.08))+ylim(c(0, 120000))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+coord_cartesian(xlim(c(0, 0.08)+ylim(c(0, 120000))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+coord_cartesian(xlim(c(0, 0.08)+ylim(c(0, 120000)))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+coord_cartesian(xlim(c(0, 0.08)+ylim(c(0, 120000)))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+coord_cartesian(xlim(c(0, 0.08))+ylim(c(0, 120000)))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")+coord_cartesian(xlim=c(0, 0.08)+ylim=c(0, 120000))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm",se=F)+coord_cartesian(xlim=c(0, 0.08)+ylim=c(0, 120000))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm",se=F)+coord_cartesian(xlim=c(0, 0.08),ylim=c(0, 120000))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm",se=F)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="line")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="line", shape=8)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="line", shape=7)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="line", shape=2)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="line", shape=8)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="point", shape=8)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="point", shape=4)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+stat_summary(fun.y="mean", geom="point", shape=8)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+scale_color_brewer(palette = "Set1")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+scale_color_brewer(palette = "Set2")
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+theme_bw()
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+facet_wrap(~ state)
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+facet_wrap(~ state, nrow=5)
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+facet_wrap(~ state, ncol=5)
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+facet_wrap(~ state, ncol=5, nrow=4)
library(ggrepel)
ggplot(midwest, aes(x=percollege, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+scale_x_continuous(breaks=c(20,40), labels=c("20%", "40%"))+scale_y_continuous(labels = scales::unit_format("m", 1e-6))+theme_bw()+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_point()+geom_smooth(method= "lm",se=F)+coord_cartesian(xlim=c(0, 0.08),ylim=c(0, 120000))+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_smooth(method= "lm",se=F)+coord_cartesian(xlim=c(0, 0.08),ylim=c(0, 120000))+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+geom_smooth+coord_cartesian(xlim=c(0, 0.02),ylim=c(0, 2500))+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+coord_cartesian(xlim=c(0, 0.02),ylim=c(0, 25000))+geom_text(aes(label=county))
ggplot(midwest, aes(x=area, y=poptotal, color=state))+coord_cartesian(xlim=c(0, 0.02),ylim=c(0, 25000))+geom_text_repel(aes(label=county))
library(ggrepel)
install.packages(ggrepel)
install.packages("ggrepel")
library(ggrepel)
ggplot(midwest, aes(x=area, y=poptotal, color=state))+coord_cartesian(xlim=c(0, 0.02),ylim=c(0, 25000))+geom_text_repel(aes(label=county))
library(data.table)
install.packages("data.table")
library(data.table)
shiny::runApp()
paste0('{ "busList", :, {"$exists": true}}')
q<-paste0('{ "busList", :, {"$exists": true}}')
q
q<-paste0('{ "busList", ":", {"$exists": true}}')
q
query <- paste0('{ "A1.directions.0.', '" : {"$exists": true}}')
query
runApp()
runApp()
runApp()
runApp()
runApp()
queryList <- mongo(db = "local", collection = "queryList")
shiny::runApp()
queryList <- mongo(db = "local", collection = "queryList")
queryList$find()
nrow(queryList$find())
typeof(queryList$find())
queryList$find()[0]
queryList$find()[1]
queryList$find()[2]
queryList$find()[3]
queryList$find()[3][3]
queryList$find()[3][[3]
]\
queryList$find()[3][[3]]
queryList$find()[3][[2]]
queryList$find()[3][[0]]
queryList$find()[3]
as.data.frame(queryList$find())
a<-as.data.frame(queryList$find())
a.length
a.length()
length(a)
nrows(a)
nrow(a)
a<-as.data.frame(queryList$find(), colnames(queryList$find()))
a<-as.data.frame(queryList$find(), col.names=queryList$find()[1])
a
nrow(a)
a<-as.data.frame(queryList$find())
nrow(a)
a
View(a)
View(a)
runApp()
quit
runApp()
runApp()
runApp()
runApp()
midwest
library(ggplot2)
midwest
typeOf(midwest)
typeof(midwest)
shiny::runApp()
runApp()
runApp()
library(mongolite)
library(jsonlite)
library(shiny)
library(DT)
library(ggplot2)
queryList <- mongo(db = "local", collection = "queryList")
queryList$find()
queryList$find()[1]
queryList$find()
typeof(queryList$find())
queryList$find()[2]
queryList$find()[2][1]
queryList$find()[[2]]
queryList$find()
queryList$find()[1,]
queryList$find()[1,]._id
queryList$find()[1,].id
typeof(queryList$find()[1,])
queryList$find()[1,].id
queryList$find()[1,]
mydata <- jsonlite::fromJSON("https://api.github.com/repos/jeroenooms/mongolite/issues")
mydata
queryList$find()[1,]
queryList$find()
data<-queryList$find()
data$created_at <- strptime(data$created_at, "%Y-%m-%dT%H:%M:%SZ", 'UTC')
data$created_at
queryList$find()
library(mongolite)
library(jsonlite)
library(shiny)
library(DT)
library(ggplot2)
queryList$find()
queryList <- mongo(db = "local", collection = "queryList")
queryList$find()
data<-queryList$find()
split(data, as.Date(data$timestamp))
charToDate(Thu Oct 12 2017 15:33:12 GMT+0800)
charToDate("Oct 12 2017 15:33:12 GMT+0800")
as.Date("Thu Oct 12 2017 15:33:12 GMT+0800")
as.Date("Oct 12 2017 15:33:12 GMT+0800")
as.Date("Oct 12 2017 15:33:12")
as.Date("Oct 12 2017")
Sys.Date()
shiny::runApp()
runApp()
runApp()
library(mongolite)
library(jsonlite)
library(shiny)
library(DT)
library(ggplot2)
queryList <- mongo(db = "local", collection = "queryList")
b <- queryList$find()
b
b <- queryList$find('{"sourceBusStop':"COM2"}'')
b <- queryList$find('{"sourceBusStop":"COM2"}')
b
b<- table(cut(b$timestamp, breaks = "Week"))
b<- table(cut(b$timestamp, breaks = "Hour"))
library(ggplot2)
mtcars
test <- mtcars
test
view(test)
show(test)
View(test)
test[-1]
test2 <- test[-1]
test2
num <- C(1,2,3,4,5,6,7,8,9)
a <- c(1,2,3,4,5,6,7,8,9)
a
for (int in a) {}
for (int in a) {
}
x= 1
for (int in a) {
test2[x,11] <- int
}
test2
x= 1
for (int in a) {
test2[x,11] <- int
x +=1
}
x= 1
for (int in a) {
test2[x,11] <- int
x = x +1
}
test2
shiny::runApp()
runApp()
library(mongolite)
library(jsonlite)
library(shiny)
library(DT)
library(ggplot2)
queryList <- mongo(db = "local", collection = "queryList")
queryList$find()
a<-queryList$find()
a$timestamp
typeof(a$timestamp[1,])
typeof(a$timestamp[1])
as.Date.POSIXlt(a$timestamp[1])
a$timestamp[1]
as.Date.numeric(a$timestamp[1])
as.character(a$timestamp[1])
as.character.Date(a$timestamp[1])
typeof(as.character.Date(a$timestamp[1]))
?cut.Date
runApp()
?cut.Date
typeof(as.character.Date(a$timestamp[1]))
a
table(cut(a$timestamp, breaks="hour"))
runApp()
shiny::runApp()
library(mongolite)
library(shiny)
library(DT)
library(ggplot2)
library(jsonlite)
queryList <- mongo(db = "local", collection = "queryList")
a <- queryList$find()
boarding <- table(cut(a$timestamp, breaks="hour"))
boarding
boarding <- table(cut(a$timestamp, breaks="week"))
boarding
boarding <- table(cut(a$timestamp, breaks="month"))
boarding
runApp()
runApp()
runApp()
library(mongolite)
library(jsonlite)
library(shiny)
library(DT)
library(ggplot2)
queryList <- mongo(db = "local", collection = "queryList")
a<-queryList$find()[1]
a
a<-queryList$find()[1,]
a
a$timestamp
a$timestamp.getHour()
getHour(a$timestamp)
runApp()
a$timestamp.getHour()
a$timestamp.getHours()
a$timestamp
(a$timestamp).getDate()
b <- a$timestamp
b
b.gethours()
library(mongolite)
library(shiny)
library(jsonlite)
library(DT)
library(ggplot2)
b.gethours()
b$gethours()
runApp()
